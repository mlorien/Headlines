//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `loading.json`.
    static let loadingJson = Rswift.FileResource(bundle: R.hostingBundle, name: "loading", pathExtension: "json")
    /// Resource file `loading2.json`.
    static let loading2Json = Rswift.FileResource(bundle: R.hostingBundle, name: "loading2", pathExtension: "json")
    
    /// `bundle.url(forResource: "loading", withExtension: "json")`
    static func loadingJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loadingJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "loading2", withExtension: "json")`
    static func loading2Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loading2Json
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `HeadlineCell`.
    static let headlineCell = _R.nib._HeadlineCell()
    
    /// `UINib(name: "HeadlineCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.headlineCell) instead")
    static func headlineCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.headlineCell)
    }
    
    static func headlineCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.headlineCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 2 view controllers.
  struct segue {
    /// This struct is generated for `HeadlinesTableViewController`, and contains static references to 1 segues.
    struct headlinesTableViewController {
      /// Segue identifier `show`.
      static let show: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HeadlinesTableViewController, WebContentViewController> = Rswift.StoryboardSegueIdentifier(identifier: "show")
      
      /// Optionally returns a typed version of segue `show`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func show(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HeadlinesTableViewController, WebContentViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.headlinesTableViewController.show, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `IntroViewController`, and contains static references to 1 segues.
    struct introViewController {
      /// Segue identifier `show`.
      static let show: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, IntroViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "show")
      
      /// Optionally returns a typed version of segue `show`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func show(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, IntroViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.introViewController.show, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `Headline`.
    static let headline = _R.storyboard.headline()
    
    /// `UIStoryboard(name: "Headline", bundle: ...)`
    static func headline(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.headline)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _HeadlineCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HeadlineCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try headline.validate()
    }
    
    struct headline: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = IntroViewController
      
      let bundle = R.hostingBundle
      let name = "Headline"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
